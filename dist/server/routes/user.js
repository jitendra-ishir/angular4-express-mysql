"use strict";
/**
 * Created by laurence-ho on 22/07/17.
 */
var express = require("express");
var router = express.Router();
var passport = require('passport');
var authentication = require('../authentication');
router.post('/login', function (req, res, next) {
    passport.authenticate('local-login', function (err, user, info) {
        if (err) {
            return res.status(401).send({ message: err.message });
        }
        if (!user) {
            return res.status(401).send({ message: info.message });
        }
        req.logIn(user, function (err) {
            if (err) {
                return res.status(401).send({ message: err.message });
            }
            var milliseconds = 0;
            if (req.body.remember) {
                milliseconds = 1000 * 60 * 30; // 30 minutes
                req.session.cookie.expires = new Date(Date.now() + milliseconds);
                req.session.cookie.maxAge = milliseconds;
            }
            else {
                milliseconds = 1000 * 60 * 60 * 24; // 1 day
                req.session.cookie.expires = new Date(Date.now() + milliseconds);
                req.session.cookie.maxAge = milliseconds;
            }
            return res.status(200).json(req.user);
        });
    })(req, res, next);
});
router.post('/signup', function (req, res, next) {
    passport.authenticate('local-signup', function (err, user, info) {
        if (err) {
            return res.status(403).send({ 'message': err.message });
        }
        if (!user) {
            return res.status(403).send({ 'message': info.message });
        }
        return res.status(200).send({ 'message': 'OK' });
    })(req, res, next);
});
router.get('/profile', authentication.isLoggedIn, function (req, res) {
    res.json(req.user);
});
router.get('/logout', function (req) {
    req.session.destroy(function (err) {
        console.error(err);
    });
    req.logout();
});
module.exports = router;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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bmNlLWhvIG9uIDIyLzA3LzE3LlxyXG4gKi9cclxuXHJcbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XHJcbmNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XHJcblxyXG5jb25zdCBwYXNzcG9ydCA9IHJlcXVpcmUoJ3Bhc3Nwb3J0Jyk7XHJcbmNvbnN0IGF1dGhlbnRpY2F0aW9uID0gcmVxdWlyZSgnLi4vYXV0aGVudGljYXRpb24nKTtcclxuXHJcbnJvdXRlci5wb3N0KCcvbG9naW4nLCAocmVxOiBhbnksIHJlczogYW55LCBuZXh0OiBhbnkpID0+IHtcclxuXHRwYXNzcG9ydC5hdXRoZW50aWNhdGUoJ2xvY2FsLWxvZ2luJywgKGVycjogYW55LCB1c2VyOiBhbnksIGluZm86IGFueSkgPT4ge1xyXG5cdFx0aWYgKGVycikge1xyXG5cdFx0XHRyZXR1cm4gcmVzLnN0YXR1cyg0MDEpLnNlbmQoe21lc3NhZ2U6IGVyci5tZXNzYWdlfSk7XHJcblx0XHR9XHJcblx0XHRpZiAoIXVzZXIpIHtcclxuXHRcdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5zZW5kKHttZXNzYWdlOiBpbmZvLm1lc3NhZ2V9KTtcclxuXHRcdH1cclxuXHRcdHJlcS5sb2dJbih1c2VyLCAoZXJyOiBhbnkpID0+IHtcclxuXHRcdFx0aWYgKGVycikge1xyXG5cdFx0XHRcdHJldHVybiByZXMuc3RhdHVzKDQwMSkuc2VuZCh7bWVzc2FnZTogZXJyLm1lc3NhZ2V9KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bGV0IG1pbGxpc2Vjb25kcyA9IDA7XHJcblx0XHRcdGlmIChyZXEuYm9keS5yZW1lbWJlcikge1xyXG5cdFx0XHRcdG1pbGxpc2Vjb25kcyA9IDEwMDAgKiA2MCAqIDMwOyAvLyAzMCBtaW51dGVzXHJcblxyXG5cdFx0XHRcdHJlcS5zZXNzaW9uLmNvb2tpZS5leHBpcmVzID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIG1pbGxpc2Vjb25kcyk7XHJcblx0XHRcdFx0cmVxLnNlc3Npb24uY29va2llLm1heEFnZSA9IG1pbGxpc2Vjb25kcztcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRtaWxsaXNlY29uZHMgPSAxMDAwICogNjAgKiA2MCAqIDI0OyAvLyAxIGRheVxyXG5cclxuXHRcdFx0XHRyZXEuc2Vzc2lvbi5jb29raWUuZXhwaXJlcyA9IG5ldyBEYXRlKERhdGUubm93KCkgKyBtaWxsaXNlY29uZHMpO1xyXG5cdFx0XHRcdHJlcS5zZXNzaW9uLmNvb2tpZS5tYXhBZ2UgPSBtaWxsaXNlY29uZHM7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHJlcS51c2VyKTtcclxuXHRcdH0pO1xyXG5cdH0pKHJlcSwgcmVzLCBuZXh0KTtcclxufSk7XHJcblxyXG5yb3V0ZXIucG9zdCgnL3NpZ251cCcsIChyZXE6IGFueSwgcmVzOiBhbnksIG5leHQ6IGFueSkgPT4ge1xyXG5cdFx0cGFzc3BvcnQuYXV0aGVudGljYXRlKCdsb2NhbC1zaWdudXAnLCAoZXJyOiBhbnksIHVzZXI6IGFueSwgaW5mbzogYW55KSA9PiB7XHJcblx0XHRcdGlmIChlcnIpIHtcclxuXHRcdFx0XHRyZXR1cm4gcmVzLnN0YXR1cyg0MDMpLnNlbmQoeydtZXNzYWdlJzogZXJyLm1lc3NhZ2V9KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCF1c2VyKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5zZW5kKHsnbWVzc2FnZSc6IGluZm8ubWVzc2FnZX0pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gcmVzLnN0YXR1cygyMDApLnNlbmQoeydtZXNzYWdlJzogJ09LJ30pO1xyXG5cdFx0fSkocmVxLCByZXMsIG5leHQpO1xyXG5cdH1cclxuKTtcclxuXHJcbnJvdXRlci5nZXQoJy9wcm9maWxlJywgYXV0aGVudGljYXRpb24uaXNMb2dnZWRJbiwgKHJlcTogYW55LCByZXM6IGFueSkgPT4ge1xyXG5cdHJlcy5qc29uKHJlcS51c2VyKTtcclxufSk7XHJcblxyXG5yb3V0ZXIuZ2V0KCcvbG9nb3V0JywgKHJlcTogYW55KSA9PiB7XHJcblx0cmVxLnNlc3Npb24uZGVzdHJveSgoZXJyOiBhbnkpID0+IHtcclxuXHRcdGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuXHR9KTtcclxuXHRyZXEubG9nb3V0KCk7XHJcbn0pO1xyXG5cclxuZXhwb3J0ID0gcm91dGVyO1xyXG4iXX0=
